{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":""},{"location":"hardware_assembly/#breakout-pins","title":"Breakout Pins","text":"<p>The PTH pins on the Qwiic 5V Boost are broken out into six 0.1\"-pitched pins on the edge of the board. These pins are used to connect a 5V I<sup>2</sup>C device to the Qwiic connect system.</p> <p>Headers are versatile option testing and development.</p> <p></p> <p>Soldering headers to the Qwiic 5V Boost.</p> <p>Users can also connect a device directly to the board.</p> <p></p> <p>Soldering wires to the Qwiic 5V Boost.</p> New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide.</p> <ul> <li> <p> <p>How to Solder: Through-Hole Soldering</p> <p>Configuration Options</p> <p>Users will have the following options for connecting a device to the Qwiic 5V Boost:</p> <p> <p> Output Power 5V 5V 3.3V I<sup>2</sup>C Logic-Level 3.3V 5V 5V </p> <p></p> <p>Power Supply</p> <p>Use either the <code>5V</code> or the <code>3V3</code> PTH pins to supply 5V or 3.3V power to the device.</p> <p>Logic-Level</p> <p>Users can modify the <code>3V3</code>/<code>5V</code> jumpers to configure the logic-level for the <code>SDA</code> and <code>SCL</code> PTH pins.</p> <p>By default, the pins are configured to a 5V logic-level.</p>"},{"location":"hardware_assembly/#qwiic-connector","title":"Qwiic Connector","text":"<p>The simplest method to connect the Qwiic 5V Boost board to a microcontroller and/or other Qwiic devices, is through the Qwiic connector.</p> <p></p> <p>The Qwiic 5V Boost with a 5V I<sup>2</sup>C RGB LED connected to its PTH pins and daisy-chained with Qwiic cables, though its Qwiic connectors.</p> <p>Tip</p> <p>The intended design of the Qwiic 5V Boost board was to be utilized with the Qwiic connector system. However, the Qwiic 5V Boost can also be utilized with other interfaces, similar to how the SparkFun Logic Level Converter - Single Supply operates. The only difference is its TTL conversion, which is push-pull and not open-drain.</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":""},{"location":"hardware_overview/#design-files","title":"Design Files","text":"<ul> <li> <p>KiCad primary logo Design Files</p> <ul> <li> Schematic</li> <li> KiCad Files</li> <li> STEP File</li> <li> Board Dimensions:<ul> <li>1.00\" x 1.00\" (25.40mm x 25.40mm)</li> </ul> </li> </ul> </li> <li> 3D ModelDimensions <p> <p>Download the <code>*.step</code> File</p> <p></p> Manipulate 3D Model <p> Controls Mouse Touchscreen Zoom Scroll Wheel 2-Finger Pinch Rotate Left-Click &amp; Drag 1-Finger Drag Move/Translate Right-Click &amp; Drag 2-Finger Drag <p></p> <p>  Dimensions of the Qwiic 5V Boost.  </p> Need more measurements? <p>For more information about the board's dimensions, users can download the KiCad files for this board. These files can be opened in KiCad and additional measurements can be made with the measuring tool.</p> <p> KiCad - Free Download!</p> <p>KiCad is free, open-source CAD program for electronics. Click on the button below to download their software. (*Users can find out more information about KiCad from their website.)</p> <p> Download KiCad primary logo </p>  Measuring Tool <p>This video demonstrates how to utilize the dimensions tool in KiCad, to include additional measurements:</p> <p> </p>"},{"location":"hardware_overview/#board-layout","title":"Board Layout","text":"<p>Layout of the major components on the Qwiic 5V Boost.</p> <p>The Qwiic 5V Boost has the following features:</p> <ol> <li> PTH Breakout Pins A set of six 0.1\" pitch PTH pins that breakout the boosted power and converted TTL signals of the I<sup>2</sup>C bus; and a control pin for the boost converter. </li> <li> Qwiic Connectors The primary interfaces for the Qwiic 5V Boost, these are pass-through connectors for the I<sup>2</sup>C bus. </li> <li> <code>PWR</code> LED A red indication LED for when the board is supplied with 3.3V. </li> </ol>"},{"location":"hardware_overview/#breakout-pins","title":"Breakout Pins","text":"<p>The PTH pins of the Qwiic 5V Boost breakout: the 3.3V power supply from the Qwiic connectors that supplies power to the AP3012, the boosted 5V power output from the AP3012, a control pin to disable the AP3012, and the converted 5V, logic-level I<sup>2</sup>C signals from the Qwiic connectors.</p> <p></p> <p>Pin connections between the top and bottom of the Qwiic 5V Boost.</p> <code>GND</code> The common ground or the 0V reference for the voltage supplies. <code>3V3</code> The same 3.3V operating power for the Qwiic connectors. <code>SDA</code>/<code>SCL</code> The converted TTL signals of the I<sup>2</sup>C pins from the Qwiic connectors; their converted logic-level is controlled by the <code>3V3</code>/<code>5V</code> jumpers. <code>5V</code> The boost 5V power output from the AP3012 boost converter, which is rated up to ~100mA load. <code>SHDN</code> The control signal for AP3012 boost converter; pull <code>LOW</code> to disable the IC. <p>I/O Configurations</p> <p>With the <code>3V3</code>/<code>5V</code> jumpers to configure the logic-levels of the I<sup>2</sup>C PTH pins, users can convert the power and logic-levels of the Qwiic connector to any combination of 3.3V and/or 5V on the PTH pins:</p> <p> <p> Output Power 5V 5V 3.3V I<sup>2</sup>C Logic-Level 3.3V 5V 5V </p> <p></p> <p>By default, the pins are configured to a 5V logic-level.</p> Maximum Load Current <p>We recommend a maximum load current of ~100mA from the <code>5V</code> output supply voltage from the AP3012 boost converter.</p> <p>The boosted supply voltage of the boost converter will begin to drop as the current draw from the load increases. We found that for a boosted 5V output from a 3.3V input voltage, there is an inflection point around 100mA where the boosted voltage begins to drop off significantly.</p> <p> Load Current Boosted Voltage 10mA 4.92V 20mA 4.91V 75mA 4.90V 100mA 4.89V 150mA 4.87V 200mA 4.65V <p></p> <p>Info</p> <p>This limitation is driven by the current load and supply current for the Qwiic connect system. It is not dictated by the junction temperature of the AP3012.</p>"},{"location":"hardware_overview/#qwiic-connectors","title":"Qwiic Connectors","text":"<p>Qwiic connectors are provided for users to seamlessly integrate with SparkFun's Qwiic Ecosystem. These are pass-through connectors that operate at the standard 3.3V operating voltage and logic-levels.</p> <p></p> <p>Qwiic connectors on the Qwiic 5V Boost.</p> What is Qwiic? <p> </p> <p>The Qwiic connect system is a solderless, polarized connection system that allows users to seamlessly daisy chain I<sup>2</sup>C boards together. Play the video, to learn more about the Qwiic connect system or click on the banner above to learn more about Qwiic products.</p> <p> </p> <p>Features of the Qwiic System</p> No SolderingPolarized ConnectorDaisy Chain-able <p> </p> <p>Qwiic cables (4-pin JST) plug easily from development boards to sensors, shields, accessory boards and more, making easy work of setting up a new prototype.</p> <p> </p> <p>There's no need to worry about accidentally swapping the <code>SDA</code> and <code>SCL</code> wires on your breadboard. The Qwiic connector is polarized so you know you\u2019ll have it wired correctly every time.</p> <p>The part numbers for the PCB connector is <code>SM04B-SRSS</code> (Datasheet) and the mating connector on the cables is <code>SHR04V-S-B</code>; or an equivalent 1mm pitch, 4-pin JST connection.</p> <p> </p> <p>It\u2019s time to leverage the power of the I<sup>2</sup>C bus! Most Qwiic boards will have two or more connectors on them, allowing multiple devices to be connected.</p>"},{"location":"hardware_overview/#led","title":"LED","text":"<p>There is a red <code>PWR</code> LED to indicate when the Qwiic 5V Boost is powered with 3.3V. The LED can be disabled by cutting the <code>LED</code> jumper.</p> <p></p> <p>The red <code>PWR</code> LED the Qwiic 5V Boost.</p>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>There are four jumpers on the back of the board that can be used to easily modify the hardware connections on the board.</p> <p></p> <p>The jumpers on the top of the Qwiic 5V Boost.</p> <code>I2C</code> This jumper can be cut to disconnect the pull-up resistors from the I<sup>2</sup>C pins of Qwiic connectors. <code>I2C HV</code> This jumper can be cut to disconnect the pull-up resistors from the I<sup>2</sup>C pins of PTH breakout pins. <code>LED</code> This jumper can be cut to remove power from the red <code>PWR</code> LED. <code>3V3</code>/<code>5V</code> Configures the TTL signal level for the I<sup>2</sup>C pins of PTH breakout pins to either 5V or 3.3V. Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction!</p> <ul> <li> <p> <p>How to Work with Jumper Pads and PCB Traces</p>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#introduction","title":"Introduction","text":"<p>The SparkFun Qwiic 5V Boost - AP3012K converts the logic-level and boost the power of the Qwiic connect system from 3.3V, to 5V on its PTH pins. This is handy for connecting any I<sup>2</sup>C device that requires a higher supply voltage, such as super bright LEDs or mechanisms like a DC fan on our air quality sensors. On the board, we also provide <code>3V3</code>/<code>5V</code> jumpers, which can be used to configure the logic-levels of the I<sup>2</sup>C PTH pins. Therefore, this board can be utilized to connect an I<sup>2</sup>C device that requires any combination of 3.3V/5V for its power and/or signals.</p> Note <p>The boost circuit on this board is rated to source up to a 100mA at 5V output, with 90% efficiency. However, users should note that this limitation is not only dependent on the load being connected, but also the amount of current that is being sourced to the Qwiic connector system.</p> <p>In this guide we'll cover how to utilize the Qwiic 5V Boost with two 5V I<sup>2</sup>C devices; such as the BlinkM LED and Sensirion SEN55 sensor. To follow along with this tutorial, users will need the following items:</p> <ul> <li>Thing Plus Development Board<ul> <li>We recommend either the ESP32 Thing Plus or the RP2350 Thing Plus</li> </ul> </li> <li>SparkFun Qwiic 5V Boost - AP3012K</li> <li>SparkFun Qwiic Cable Kit</li> <li>A 5V compatible I<sup>2</sup>C device:<ul> <li>BlinkM - I2C Controlled RGB LED</li> <li>Sensirion SEN55 - Particle, VOC, NO<sub>x</sub>, Humidity, and Temperature Sensor</li> </ul> </li> <li>Soldering tools</li> <li>Headers and jumper Wire</li> <li>USB cable</li> </ul> Warning <p>Soldering is required for this board.</p> Tip <p>The particulate matter sensor requires an extra <code>GND</code> connection to enable the I<sup>2</sup>C interface.</p> Note <p>These other Sensirion particulate matter sensors, may also be used in place of the SEN55:</p> <ul> <li>Sensirion SPS30 - Particulate Matter Sensor</li> <li>Sensirion SEN54 - Particle, VOC, Humidity, and Temperature Sensor</li> </ul>"},{"location":"introduction/#topics","title":"Topics","text":"<p>This document contains two main sections: Quickstart Guide and Hardware sub-sections.</p> <ul> <li>The Quickstart Guide assumes a working knowledge of development boards and the required software to program them for your project's needs. It covers the basic hardware information and assembly instructions users would need to get started with this product.</li> <li>The Hardware sections provide:<ul> <li>An overview of the Qwiic 5V Boost - AP3012K board and its major components. Refer to this page for information on the connectors, breakout pins, and jumpers.</li> <li>Assembly instructions to utilize this product with compatible 5V I<sup>2</sup>C devices.</li> </ul> </li> </ul>"},{"location":"introduction/#resources-and-support","title":"Resources and Support","text":"<p>You'll find the board design files (KiCad files &amp; schematic), relevant documentation (datasheets, white papers, etc.) and other helpful links on the Resources page. Lastly, the Support section includes a Troubleshooting page that includes any helpful tips specific to this board as well as information on how to receive technical support from SparkFun.</p>"},{"location":"print_view/","title":"Introduction","text":"<p>In this guide we'll cover how to utilize the Qwiic 5V Boost with two 5V I<sup>2</sup>C devices; such as the BlinkM LED and Sensirion SEN55 sensor. To follow along with this tutorial, users will need the following items:</p> <ul> <li>Thing Plus Development Board<ul> <li>We recommend either the ESP32 Thing Plus or the RP2350 Thing Plus</li> </ul> </li> <li>SparkFun Qwiic 5V Boost - AP3012K</li> <li>SparkFun Qwiic Cable Kit</li> <li>A 5V compatible I<sup>2</sup>C device:<ul> <li>BlinkM - I2C Controlled RGB LED</li> <li>Sensirion SEN55 - Particle, VOC, NO<sub>x</sub>, Humidity, and Temperature Sensor</li> </ul> </li> <li>Soldering tools</li> <li>Headers and jumper Wire</li> <li>USB cable</li> </ul> Warning <p>Soldering is required for this board.</p>"},{"location":"print_view/#board-layout","title":"Board Layout","text":"<p>This is the basic layout of the Qwiic 5V Boost board.</p> <p></p> <p>Layout of the major components on the Qwiic 5V Boost.</p>"},{"location":"print_view/#demo-blinkm-led","title":"Demo - BlinkM LED","text":"<p>In this demo, we'll connect a BlinkM RGB LED to the Qwiic 5V Boost board; and control it with an ESP32 Thing Plus development board, utilizing the Arduino IDE.</p>"},{"location":"print_view/#connect-the-blinkm-led","title":"Connect the BlinkM LED","text":"<p>Soldering is required to connect the BlinkM LED to the Qwiic 5V Boost board. In the example below, we used headers and jumper wires to make the necessary pin connections shown in the table. Once the BlinkM LED is attached, users will need to connect the Qwiic 5V Boost board to their development board with a Qwiic cable.</p> Qwiic 5V Boost BlinkM RGB LED <code>GND</code> <code>-</code> <code>5V</code> <code>+</code> <code>SDA</code> <code>d</code> <code>SCL</code> <code>c</code> <p></p> <p>Connecting the BlinkM LED to the Qwiic 5V Boost.</p> Tip <p>If you're not familiar with using breakout board or soldering, please refer to the Hardware Overview &amp; Assembly sections for a detailed overview of the board along with instructions on soldering to the breakout.</p>"},{"location":"print_view/#example-code","title":"Example Code","text":"<p>With the hardware assembled, users will need to program their development board to control the BlinkM LED. In the Arduino IDE, upload the <code>BlinkMStart</code> example sketch from the BlinkM Arduino library. This example will fade the hue of the BlinkM LED and output the hue values to the Serial Monitor.</p> <p>Follow the steps below to upload the example code:</p> <ul> <li>Open the Arduino IDE.</li> <li>Manually install the BlinkM Arduino library, by downloading it from the GitHub repository.</li> <li>Restart the Arduino IDE.</li> <li>Open <code>BlinkMStart</code> example sketch from the BlinkM Arduino library.</li> <li>Select your board and serial port; then, upload the sketch.</li> <li>Once the code compiles and uploads to the development board, open the serial monitor with the baud rate set to 9600 bps.</li> <li>The example sketch prints out the hue values as they change on the BlinkM LED.</li> </ul> Tip <p>If you're not familiar with using the Arduino IDE, refer to the Troubleshooting Tips section for related tutorials.</p> <p>LED Not Changing</p> <p>For users who find it hard to distinguish the changes in the LED's hue, the sketch can be modified to change the RGB values. Below, is an example of modifications that would change the <code>red</code> value of the RGB LED.</p> Modifications <p><pre><code>byte red=0;\n</code></pre> <pre><code>void loop() \n{\n    red += 10; // random(0,255);\n    Serial.print(\"Fading to hue \");\n    Serial.println(red);\n\n    blinkm.fadeToRGB( red, 255, 255);\n\n    delay(500);\n}\n</code></pre></p>"},{"location":"print_view/#source-files","title":"Source Files","text":"<ul> <li>BlinkM Arduino library</li> <li> <p><code>BlinkMStart.ino</code> example sketch</p> BlinkMStart.ino <pre><code>/*\n * BlinkMStart -- simplest BlinkM example.\n *   Change the hue of the BlinkM\n * \n */\n\n#include \"BlinkM.h\"\n#include \"Wire.h\"\n\n\nint ledPin = 13;      // select the pin for the LED\n\nint blinkm_addr = 0;  // 0 = talk to all blinkms on the i2c bus\n\nbyte hue=0;\n\nBlinkM blinkm = BlinkM( blinkm_addr );\n\n//\nvoid setup() \n{\n  delay(1000);\n  pinMode(ledPin, OUTPUT);\n\n  blinkm.powerUp();  // use analog pins A3,A2 as power pins (works for Uno)\n\n  blinkm.begin();\n  blinkm.off();     // stop script and go to black\n\n  delay(1000);\n  Serial.begin(9600);\n  Serial.println(\"BlinkStart ready\");\n}\n\n//\nvoid loop() \n{\n    hue += 10; // random(0,255);\n    Serial.print(\"Fading to hue \");\n    Serial.println(hue);\n\n    blinkm.fadeToHSB( hue, 255, 255);\n\n    delay(500);\n}\n</code></pre> </li> </ul>"},{"location":"print_view/#demo-sen55-particle-sensor","title":"Demo - SEN55 Particle Sensor","text":"<p>In this demo, we'll connect the Sensirion SEN55 particulate matter, VOC, NO<sub>x</sub>, humidity, and temperature sensor to the Qwiic 5V Boost board; and read data from it with an ESP32 Thing Plus development board, utilizing the Arduino IDE.</p>"},{"location":"print_view/#connect-the-sensirion-sen55-sensor","title":"Connect the Sensirion SEN55 Sensor","text":"<p>Soldering is required to connect the SEN55 sensor to the Qwiic 5V Boost board. In the example below, we used headers and a Qwiic jumper cable to make the necessary pin connections shown in the tables.</p> Qwiic 5V Boost Sensirion SEN55 Sensor <code>GND</code> <code>2</code> <code>5V</code> <code>1</code> <code>SDA</code> <code>3</code> <code>SCL</code> <code>4</code> <code>GND</code> <code>5</code> <p></p> <p>Hardware pins for the Sensirion SEN55 sensor.</p> <p>Once the sensor is attached, users will need to connect the Qwiic 5V Boost board to their development board with a Qwiic cable.</p> <p></p> <p>Connecting the Sensirion SEN55 sensor to the Qwiic 5V Boost.</p> Tip <p>If you're not familiar with using breakout board or soldering, please refer to the Hardware Overview &amp; Assembly sections for a detailed overview of the board along with instructions on soldering to the breakout.</p>"},{"location":"print_view/#example-code_1","title":"Example Code","text":"<p>With the hardware assembled, users will need to program their development board to retrieve data from the SEN5X sensor. In the Arduino IDE, upload the <code>exampleUsage</code> example sketch from the Sensirion I2C SEN5X Arduino library. This example will read the particulate matter, VOC, NO<sub>x</sub>, humidity, and temperature values from the SEN5X sensor and output them in the Serial Monitor.</p> <p>Follow the steps below to upload the example code:</p> <ul> <li>Open the Arduino IDE.</li> <li>Open the Library Manager tool, search for the <code>Sensirion I2C SEN5X</code> Arduino library and install the latest version.</li> <li>Open <code>exampleUsage</code> example sketch from the Sensirion I2C SEN5X Arduino library.</li> <li>Select your board and serial port; then, upload the sketch.</li> <li>Once the code compiles and uploads to the development board, open the serial monitor with the baud rate set to 115200 bps.</li> <li>The example sketch prints out the particulate matter, VOC, NO<sub>x</sub>, humidity, and temperature values from the SEN55 sensor.</li> </ul> Tip <p>If you're not familiar with using the Arduino IDE, refer to the Troubleshooting Tips section for related tutorials.</p>"},{"location":"print_view/#source-files_1","title":"Source Files","text":"<ul> <li>Sensirion SEN5X Arduino library</li> <li> <p><code>exampleUsage.ino</code> example sketch</p> exampleUsage.ino <pre><code>/*\n * I2C-Generator: 0.3.0\n * Yaml Version: 2.1.3\n * Template Version: 0.7.0-112-g190ecaa\n */\n/*\n * Copyright (c) 2021, Sensirion AG\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * * Neither the name of Sensirion AG nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\n#include &lt;Arduino.h&gt;\n#include &lt;SensirionI2CSen5x.h&gt;\n#include &lt;Wire.h&gt;\n\n// The used commands use up to 48 bytes. On some Arduino's the default buffer\n// space is not large enough\n#define MAXBUF_REQUIREMENT 48\n\n#if (defined(I2C_BUFFER_LENGTH) &amp;&amp;                 \\\n     (I2C_BUFFER_LENGTH &gt;= MAXBUF_REQUIREMENT)) || \\\n    (defined(BUFFER_LENGTH) &amp;&amp; BUFFER_LENGTH &gt;= MAXBUF_REQUIREMENT)\n#define USE_PRODUCT_INFO\n#endif\n\nSensirionI2CSen5x sen5x;\n\nvoid printModuleVersions() {\n    uint16_t error;\n    char errorMessage[256];\n\n    unsigned char productName[32];\n    uint8_t productNameSize = 32;\n\n    error = sen5x.getProductName(productName, productNameSize);\n\n    if (error) {\n        Serial.print(\"Error trying to execute getProductName(): \");\n        errorToString(error, errorMessage, 256);\n        Serial.println(errorMessage);\n    } else {\n        Serial.print(\"ProductName:\");\n        Serial.println((char*)productName);\n    }\n\n    uint8_t firmwareMajor;\n    uint8_t firmwareMinor;\n    bool firmwareDebug;\n    uint8_t hardwareMajor;\n    uint8_t hardwareMinor;\n    uint8_t protocolMajor;\n    uint8_t protocolMinor;\n\n    error = sen5x.getVersion(firmwareMajor, firmwareMinor, firmwareDebug,\n                             hardwareMajor, hardwareMinor, protocolMajor,\n                             protocolMinor);\n    if (error) {\n        Serial.print(\"Error trying to execute getVersion(): \");\n        errorToString(error, errorMessage, 256);\n        Serial.println(errorMessage);\n    } else {\n        Serial.print(\"Firmware: \");\n        Serial.print(firmwareMajor);\n        Serial.print(\".\");\n        Serial.print(firmwareMinor);\n        Serial.print(\", \");\n\n        Serial.print(\"Hardware: \");\n        Serial.print(hardwareMajor);\n        Serial.print(\".\");\n        Serial.println(hardwareMinor);\n    }\n}\n\nvoid printSerialNumber() {\n    uint16_t error;\n    char errorMessage[256];\n    unsigned char serialNumber[32];\n    uint8_t serialNumberSize = 32;\n\n    error = sen5x.getSerialNumber(serialNumber, serialNumberSize);\n    if (error) {\n        Serial.print(\"Error trying to execute getSerialNumber(): \");\n        errorToString(error, errorMessage, 256);\n        Serial.println(errorMessage);\n    } else {\n        Serial.print(\"SerialNumber:\");\n        Serial.println((char*)serialNumber);\n    }\n}\n\nvoid setup() {\n\n    Serial.begin(115200);\n    while (!Serial) {\n        delay(100);\n    }\n\n    Wire.begin();\n\n    sen5x.begin(Wire);\n\n    uint16_t error;\n    char errorMessage[256];\n    error = sen5x.deviceReset();\n    if (error) {\n        Serial.print(\"Error trying to execute deviceReset(): \");\n        errorToString(error, errorMessage, 256);\n        Serial.println(errorMessage);\n    }\n\n// Print SEN55 module information if i2c buffers are large enough\n#ifdef USE_PRODUCT_INFO\n    printSerialNumber();\n    printModuleVersions();\n#endif\n\n    // set a temperature offset in degrees celsius\n    // Note: supported by SEN54 and SEN55 sensors\n    // By default, the temperature and humidity outputs from the sensor\n    // are compensated for the modules self-heating. If the module is\n    // designed into a device, the temperature compensation might need\n    // to be adapted to incorporate the change in thermal coupling and\n    // self-heating of other device components.\n    //\n    // A guide to achieve optimal performance, including references\n    // to mechanical design-in examples can be found in the app note\n    // \u201cSEN5x \u2013 Temperature Compensation Instruction\u201d at www.sensirion.com.\n    // Please refer to those application notes for further information\n    // on the advanced compensation settings used\n    // in `setTemperatureOffsetParameters`, `setWarmStartParameter` and\n    // `setRhtAccelerationMode`.\n    //\n    // Adjust tempOffset to account for additional temperature offsets\n    // exceeding the SEN module's self heating.\n    float tempOffset = 0.0;\n    error = sen5x.setTemperatureOffsetSimple(tempOffset);\n    if (error) {\n        Serial.print(\"Error trying to execute setTemperatureOffsetSimple(): \");\n        errorToString(error, errorMessage, 256);\n        Serial.println(errorMessage);\n    } else {\n        Serial.print(\"Temperature Offset set to \");\n        Serial.print(tempOffset);\n        Serial.println(\" deg. Celsius (SEN54/SEN55 only\");\n    }\n\n    // Start Measurement\n    error = sen5x.startMeasurement();\n    if (error) {\n        Serial.print(\"Error trying to execute startMeasurement(): \");\n        errorToString(error, errorMessage, 256);\n        Serial.println(errorMessage);\n    }\n}\n\nvoid loop() {\n    uint16_t error;\n    char errorMessage[256];\n\n    delay(1000);\n\n    // Read Measurement\n    float massConcentrationPm1p0;\n    float massConcentrationPm2p5;\n    float massConcentrationPm4p0;\n    float massConcentrationPm10p0;\n    float ambientHumidity;\n    float ambientTemperature;\n    float vocIndex;\n    float noxIndex;\n\n    error = sen5x.readMeasuredValues(\n        massConcentrationPm1p0, massConcentrationPm2p5, massConcentrationPm4p0,\n        massConcentrationPm10p0, ambientHumidity, ambientTemperature, vocIndex,\n        noxIndex);\n\n    if (error) {\n        Serial.print(\"Error trying to execute readMeasuredValues(): \");\n        errorToString(error, errorMessage, 256);\n        Serial.println(errorMessage);\n    } else {\n        Serial.print(\"MassConcentrationPm1p0:\");\n        Serial.print(massConcentrationPm1p0);\n        Serial.print(\"\\t\");\n        Serial.print(\"MassConcentrationPm2p5:\");\n        Serial.print(massConcentrationPm2p5);\n        Serial.print(\"\\t\");\n        Serial.print(\"MassConcentrationPm4p0:\");\n        Serial.print(massConcentrationPm4p0);\n        Serial.print(\"\\t\");\n        Serial.print(\"MassConcentrationPm10p0:\");\n        Serial.print(massConcentrationPm10p0);\n        Serial.print(\"\\t\");\n        Serial.print(\"AmbientHumidity:\");\n        if (isnan(ambientHumidity)) {\n            Serial.print(\"n/a\");\n        } else {\n            Serial.print(ambientHumidity);\n        }\n        Serial.print(\"\\t\");\n        Serial.print(\"AmbientTemperature:\");\n        if (isnan(ambientTemperature)) {\n            Serial.print(\"n/a\");\n        } else {\n            Serial.print(ambientTemperature);\n        }\n        Serial.print(\"\\t\");\n        Serial.print(\"VocIndex:\");\n        if (isnan(vocIndex)) {\n            Serial.print(\"n/a\");\n        } else {\n            Serial.print(vocIndex);\n        }\n        Serial.print(\"\\t\");\n        Serial.print(\"NoxIndex:\");\n        if (isnan(noxIndex)) {\n            Serial.println(\"n/a\");\n        } else {\n            Serial.println(noxIndex);\n        }\n    }\n}\n</code></pre> </li> </ul> <p></p>"},{"location":"print_view/#introduction","title":"Introduction","text":"<p>The SparkFun Qwiic 5V Boost - AP3012K converts the logic-level and boost the power of the Qwiic connect system from 3.3V, to 5V on its PTH pins. This is handy for connecting any I<sup>2</sup>C device that requires a higher supply voltage, such as super bright LEDs or mechanisms like a DC fan on our air quality sensors. On the board, we also provide <code>3V3</code>/<code>5V</code> jumpers, which can be used to configure the logic-levels of the I<sup>2</sup>C PTH pins. Therefore, this board can be utilized to connect an I<sup>2</sup>C device that requires any combination of 3.3V/5V for its power and/or signals.</p> Note <p>The boost circuit on this board is rated to source up to a 100mA at 5V output, with 90% efficiency. However, users should note that this limitation is not only dependent on the load being connected, but also the amount of current that is being sourced to the Qwiic connector system.</p>"},{"location":"print_view/#hardware-overview","title":"Hardware Overview","text":""},{"location":"print_view/#design-files","title":"Design Files","text":"<ul> <li> <p>KiCad primary logo Design Files</p> <ul> <li> Schematic</li> <li> KiCad Files</li> <li> STEP File</li> <li> Board Dimensions:<ul> <li>1.00\" x 1.00\" (25.40mm x 25.40mm)</li> </ul> </li> </ul> </li> <li> 3D ModelDimensions <p> <p>Download the <code>*.step</code> File</p> <p></p> Manipulate 3D Model <p> Controls Mouse Touchscreen Zoom Scroll Wheel 2-Finger Pinch Rotate Left-Click &amp; Drag 1-Finger Drag Move/Translate Right-Click &amp; Drag 2-Finger Drag <p></p> <p>  Dimensions of the Qwiic 5V Boost.  </p> Need more measurements? <p>For more information about the board's dimensions, users can download the KiCad files for this board. These files can be opened in KiCad and additional measurements can be made with the measuring tool.</p> <p> KiCad - Free Download!</p> <p>KiCad is free, open-source CAD program for electronics. Click on the button below to download their software. (*Users can find out more information about KiCad from their website.)</p> <p> Download KiCad primary logo </p>  Measuring Tool <p>This video demonstrates how to utilize the dimensions tool in KiCad, to include additional measurements:</p> <p> </p>"},{"location":"print_view/#board-layout_1","title":"Board Layout","text":"<p>Layout of the major components on the Qwiic 5V Boost.</p> <p>The Qwiic 5V Boost has the following features:</p> <ol> <li> PTH Breakout Pins A set of six 0.1\" pitch PTH pins that breakout the boosted power and converted TTL signals of the I<sup>2</sup>C bus; and a control pin for the boost converter. </li> <li> Qwiic Connectors The primary interfaces for the Qwiic 5V Boost, these are pass-through connectors for the I<sup>2</sup>C bus. </li> <li> <code>PWR</code> LED A red indication LED for when the board is supplied with 3.3V. </li> </ol>"},{"location":"print_view/#breakout-pins","title":"Breakout Pins","text":"<p>The PTH pins of the Qwiic 5V Boost breakout: the 3.3V power supply from the Qwiic connectors that supplies power to the AP3012, the boosted 5V power output from the AP3012, a control pin to disable the AP3012, and the converted 5V, logic-level I<sup>2</sup>C signals from the Qwiic connectors.</p> <p></p> <p>Pin connections between the top and bottom of the Qwiic 5V Boost.</p> <code>GND</code> The common ground or the 0V reference for the voltage supplies. <code>3V3</code> The same 3.3V operating power for the Qwiic connectors. <code>SDA</code>/<code>SCL</code> The converted TTL signals of the I<sup>2</sup>C pins from the Qwiic connectors; their converted logic-level is controlled by the <code>3V3</code>/<code>5V</code> jumpers. <code>5V</code> The boost 5V power output from the AP3012 boost converter, which is rated up to ~100mA load. <code>SHDN</code> The control signal for AP3012 boost converter; pull <code>LOW</code> to disable the IC. <p>I/O Configurations</p> <p>With the <code>3V3</code>/<code>5V</code> jumpers to configure the logic-levels of the I<sup>2</sup>C PTH pins, users can convert the power and logic-levels of the Qwiic connector to any combination of 3.3V and/or 5V on the PTH pins:</p> <p> <p> Output Power 5V 5V 3.3V I<sup>2</sup>C Logic-Level 3.3V 5V 5V </p> <p></p> <p>By default, the pins are configured to a 5V logic-level.</p> Maximum Load Current <p>We recommend a maximum load current of ~100mA from the <code>5V</code> output supply voltage from the AP3012 boost converter.</p> <p>The boosted supply voltage of the boost converter will begin to drop as the current draw from the load increases. We found that for a boosted 5V output from a 3.3V input voltage, there is an inflection point around 100mA where the boosted voltage begins to drop off significantly.</p> <p> Load Current Boosted Voltage 10mA 4.92V 20mA 4.91V 75mA 4.90V 100mA 4.89V 150mA 4.87V 200mA 4.65V <p></p> <p>Info</p> <p>This limitation is driven by the current load and supply current for the Qwiic connect system. It is not dictated by the junction temperature of the AP3012.</p>"},{"location":"print_view/#qwiic-connectors","title":"Qwiic Connectors","text":"<p>Qwiic connectors are provided for users to seamlessly integrate with SparkFun's Qwiic Ecosystem. These are pass-through connectors that operate at the standard 3.3V operating voltage and logic-levels.</p> <p></p> <p>Qwiic connectors on the Qwiic 5V Boost.</p> What is Qwiic? <p> </p> <p>The Qwiic connect system is a solderless, polarized connection system that allows users to seamlessly daisy chain I<sup>2</sup>C boards together. Play the video, to learn more about the Qwiic connect system or click on the banner above to learn more about Qwiic products.</p> <p> </p> <p>Features of the Qwiic System</p> No SolderingPolarized ConnectorDaisy Chain-able <p> </p> <p>Qwiic cables (4-pin JST) plug easily from development boards to sensors, shields, accessory boards and more, making easy work of setting up a new prototype.</p> <p> </p> <p>There's no need to worry about accidentally swapping the <code>SDA</code> and <code>SCL</code> wires on your breadboard. The Qwiic connector is polarized so you know you\u2019ll have it wired correctly every time.</p> <p>The part numbers for the PCB connector is <code>SM04B-SRSS</code> (Datasheet) and the mating connector on the cables is <code>SHR04V-S-B</code>; or an equivalent 1mm pitch, 4-pin JST connection.</p> <p> </p> <p>It\u2019s time to leverage the power of the I<sup>2</sup>C bus! Most Qwiic boards will have two or more connectors on them, allowing multiple devices to be connected.</p>"},{"location":"print_view/#led","title":"LED","text":"<p>There is a red <code>PWR</code> LED to indicate when the Qwiic 5V Boost is powered with 3.3V. The LED can be disabled by cutting the <code>LED</code> jumper.</p> <p></p> <p>The red <code>PWR</code> LED the Qwiic 5V Boost.</p>"},{"location":"print_view/#jumpers","title":"Jumpers","text":"<p>There are four jumpers on the back of the board that can be used to easily modify the hardware connections on the board.</p> <p></p> <p>The jumpers on the top of the Qwiic 5V Boost.</p> <code>I2C</code> This jumper can be cut to disconnect the pull-up resistors from the I<sup>2</sup>C pins of Qwiic connectors. <code>I2C HV</code> This jumper can be cut to disconnect the pull-up resistors from the I<sup>2</sup>C pins of PTH breakout pins. <code>LED</code> This jumper can be cut to remove power from the red <code>PWR</code> LED. <code>3V3</code>/<code>5V</code> Configures the TTL signal level for the I<sup>2</sup>C pins of PTH breakout pins to either 5V or 3.3V. Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction!</p> <ul> <li> <p> <p>How to Work with Jumper Pads and PCB Traces</p>"},{"location":"print_view/#hardware-assembly","title":"Hardware Assembly","text":""},{"location":"print_view/#breakout-pins_1","title":"Breakout Pins","text":"<p>The PTH pins on the Qwiic 5V Boost are broken out into six 0.1\"-pitched pins on the edge of the board. These pins are used to connect a 5V I<sup>2</sup>C device to the Qwiic connect system.</p> <p>Headers are versatile option testing and development.</p> <p></p> <p>Soldering headers to the Qwiic 5V Boost.</p> <p>Users can also connect a device directly to the board.</p> <p></p> <p>Soldering wires to the Qwiic 5V Boost.</p> New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide.</p> <ul> <li> <p> <p>How to Solder: Through-Hole Soldering</p> <p>Configuration Options</p> <p>Users will have the following options for connecting a device to the Qwiic 5V Boost:</p> <p> <p> Output Power 5V 5V 3.3V I<sup>2</sup>C Logic-Level 3.3V 5V 5V </p> <p></p> <p>Power Supply</p> <p>Use either the <code>5V</code> or the <code>3V3</code> PTH pins to supply 5V or 3.3V power to the device.</p> <p>Logic-Level</p> <p>Users can modify the <code>3V3</code>/<code>5V</code> jumpers to configure the logic-level for the <code>SDA</code> and <code>SCL</code> PTH pins.</p> <p>By default, the pins are configured to a 5V logic-level.</p>"},{"location":"print_view/#qwiic-connector","title":"Qwiic Connector","text":"<p>The simplest method to connect the Qwiic 5V Boost board to a microcontroller and/or other Qwiic devices, is through the Qwiic connector.</p> <p></p> <p>The Qwiic 5V Boost with a 5V I<sup>2</sup>C RGB LED connected to its PTH pins and daisy-chained with Qwiic cables, though its Qwiic connectors.</p> <p>Tip</p> <p>The intended design of the Qwiic 5V Boost board was to be utilized with the Qwiic connector system. However, the Qwiic 5V Boost can also be utilized with other interfaces, similar to how the SparkFun Logic Level Converter - Single Supply operates. The only difference is its TTL conversion, which is push-pull and not open-drain.</p>"},{"location":"print_view/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"print_view/#getting-started-with-the-arduino-ide","title":"Getting Started with the Arduino IDE","text":"<p>This guide assumes users are utilizing the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE, library, or board add-on, please review the following tutorials:</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> <li>Installing Board Definitions in the Arduino IDE</li> </ul>"},{"location":"print_view/#5v-power-limitation","title":"5V Power Limitation","text":"<p>We recommend users limit the load current on the <code>5V</code> output supply voltage to a maximum of ~100mA.</p> <p>This should not be considered as a limitation dictated by the junction temperature of the AP3012. The limitation is driven by the power supply for the Qwiic connect system and the load being placed on the boost circuit. In order to compensate for the increased current, the supply voltage from the AP3012 boost converter will begin to drop as the current draw increases.</p>"},{"location":"print_view/#resources","title":"Resources","text":""},{"location":"print_view/#product-resources","title":"Product Resources","text":"<ul> <li>SparkFun logo Product Page</li> <li> Design Files:<ul> <li> Schematic</li> <li> Board Dimensions</li> <li> KiCad Files</li> <li> STEP File</li> </ul> </li> <li>Component Documentation:<ul> <li> AP3012 Datasheet</li> <li> AP3012K EVB User Guide</li> </ul> </li> <li> SFE Product Showcase Video</li> <li> Hardware Repo</li> </ul>"},{"location":"print_view/#sparkfun-logo-additional-resources","title":"SparkFun logo Additional Resources","text":"<ul> <li>SparkFun logo Qwiic Connect System</li> <li> SparkFun Technical Assistance</li> </ul>"},{"location":"print_view/#manufacturers-resources","title":"\ud83c\udfed Manufacturer's Resources","text":"<p>Diodes Incorporated also provides great resources for the AP3012 Buck Regulator:</p> <ul> <li>Product Page<ul> <li> Technical Documentation</li> </ul> </li> <li> Technical Support Page</li> </ul> <p> </p>"},{"location":"quick_start/","title":"Quick Start Guide","text":"<p>In this guide we'll cover how to utilize the Qwiic 5V Boost with two 5V I<sup>2</sup>C devices; such as the BlinkM LED and Sensirion SEN55 sensor. To follow along with this tutorial, users will need the following items:</p> <ul> <li>Thing Plus Development Board<ul> <li>We recommend either the ESP32 Thing Plus or the RP2350 Thing Plus</li> </ul> </li> <li>SparkFun Qwiic 5V Boost - AP3012K</li> <li>SparkFun Qwiic Cable Kit</li> <li>A 5V compatible I<sup>2</sup>C device:<ul> <li>BlinkM - I2C Controlled RGB LED</li> <li>Sensirion SEN55 - Particle, VOC, NO<sub>x</sub>, Humidity, and Temperature Sensor</li> </ul> </li> <li>Soldering tools</li> <li>Headers and jumper Wire</li> <li>USB cable</li> </ul> Warning <p>Soldering is required for this board.</p>"},{"location":"quick_start/#board-layout","title":"Board Layout","text":"<p>This is the basic layout of the Qwiic 5V Boost board.</p> <p></p> <p>Layout of the major components on the Qwiic 5V Boost.</p>"},{"location":"quick_start/#demo-blinkm-led","title":"Demo - BlinkM LED","text":"<p>In this demo, we'll connect a BlinkM RGB LED to the Qwiic 5V Boost board; and control it with an ESP32 Thing Plus development board, utilizing the Arduino IDE.</p>"},{"location":"quick_start/#connect-the-blinkm-led","title":"Connect the BlinkM LED","text":"<p>Soldering is required to connect the BlinkM LED to the Qwiic 5V Boost board. In the example below, we used headers and jumper wires to make the necessary pin connections shown in the table. Once the BlinkM LED is attached, users will need to connect the Qwiic 5V Boost board to their development board with a Qwiic cable.</p> Qwiic 5V Boost BlinkM RGB LED <code>GND</code> <code>-</code> <code>5V</code> <code>+</code> <code>SDA</code> <code>d</code> <code>SCL</code> <code>c</code> <p></p> <p>Connecting the BlinkM LED to the Qwiic 5V Boost.</p> Tip <p>If you're not familiar with using breakout board or soldering, please refer to the Hardware Overview &amp; Assembly sections for a detailed overview of the board along with instructions on soldering to the breakout.</p>"},{"location":"quick_start/#example-code","title":"Example Code","text":"<p>With the hardware assembled, users will need to program their development board to control the BlinkM LED. In the Arduino IDE, upload the <code>BlinkMStart</code> example sketch from the BlinkM Arduino library. This example will fade the hue of the BlinkM LED and output the hue values to the Serial Monitor.</p> <p>Follow the steps below to upload the example code:</p> <ul> <li>Open the Arduino IDE.</li> <li>Manually install the BlinkM Arduino library, by downloading it from the GitHub repository.</li> <li>Restart the Arduino IDE.</li> <li>Open <code>BlinkMStart</code> example sketch from the BlinkM Arduino library.</li> <li>Select your board and serial port; then, upload the sketch.</li> <li>Once the code compiles and uploads to the development board, open the serial monitor with the baud rate set to 9600 bps.</li> <li>The example sketch prints out the hue values as they change on the BlinkM LED.</li> </ul> Tip <p>If you're not familiar with using the Arduino IDE, refer to the Troubleshooting Tips section for related tutorials.</p> <p>LED Not Changing</p> <p>For users who find it hard to distinguish the changes in the LED's hue, the sketch can be modified to change the RGB values. Below, is an example of modifications that would change the <code>red</code> value of the RGB LED.</p> Modifications <p><pre><code>byte red=0;\n</code></pre> <pre><code>void loop() \n{\n    red += 10; // random(0,255);\n    Serial.print(\"Fading to hue \");\n    Serial.println(red);\n\n    blinkm.fadeToRGB( red, 255, 255);\n\n    delay(500);\n}\n</code></pre></p>"},{"location":"quick_start/#source-files","title":"Source Files","text":"<ul> <li>BlinkM Arduino library</li> <li> <p><code>BlinkMStart.ino</code> example sketch</p> BlinkMStart.ino <pre><code>/*\n * BlinkMStart -- simplest BlinkM example.\n *   Change the hue of the BlinkM\n * \n */\n\n#include \"BlinkM.h\"\n#include \"Wire.h\"\n\n\nint ledPin = 13;      // select the pin for the LED\n\nint blinkm_addr = 0;  // 0 = talk to all blinkms on the i2c bus\n\nbyte hue=0;\n\nBlinkM blinkm = BlinkM( blinkm_addr );\n\n//\nvoid setup() \n{\n  delay(1000);\n  pinMode(ledPin, OUTPUT);\n\n  blinkm.powerUp();  // use analog pins A3,A2 as power pins (works for Uno)\n\n  blinkm.begin();\n  blinkm.off();     // stop script and go to black\n\n  delay(1000);\n  Serial.begin(9600);\n  Serial.println(\"BlinkStart ready\");\n}\n\n//\nvoid loop() \n{\n    hue += 10; // random(0,255);\n    Serial.print(\"Fading to hue \");\n    Serial.println(hue);\n\n    blinkm.fadeToHSB( hue, 255, 255);\n\n    delay(500);\n}\n</code></pre> </li> </ul>"},{"location":"quick_start/#demo-sen55-particle-sensor","title":"Demo - SEN55 Particle Sensor","text":"<p>In this demo, we'll connect the Sensirion SEN55 particulate matter, VOC, NO<sub>x</sub>, humidity, and temperature sensor to the Qwiic 5V Boost board; and read data from it with an ESP32 Thing Plus development board, utilizing the Arduino IDE.</p>"},{"location":"quick_start/#connect-the-sensirion-sen55-sensor","title":"Connect the Sensirion SEN55 Sensor","text":"<p>Soldering is required to connect the SEN55 sensor to the Qwiic 5V Boost board. In the example below, we used headers and a Qwiic jumper cable to make the necessary pin connections shown in the tables.</p> Qwiic 5V Boost Sensirion SEN55 Sensor <code>GND</code> <code>2</code> <code>5V</code> <code>1</code> <code>SDA</code> <code>3</code> <code>SCL</code> <code>4</code> <code>GND</code> <code>5</code> <p></p> <p>Hardware pins for the Sensirion SEN55 sensor.</p> <p>Once the sensor is attached, users will need to connect the Qwiic 5V Boost board to their development board with a Qwiic cable.</p> <p></p> <p>Connecting the Sensirion SEN55 sensor to the Qwiic 5V Boost.</p> Tip <p>If you're not familiar with using breakout board or soldering, please refer to the Hardware Overview &amp; Assembly sections for a detailed overview of the board along with instructions on soldering to the breakout.</p>"},{"location":"quick_start/#example-code_1","title":"Example Code","text":"<p>With the hardware assembled, users will need to program their development board to retrieve data from the SEN5X sensor. In the Arduino IDE, upload the <code>exampleUsage</code> example sketch from the Sensirion I2C SEN5X Arduino library. This example will read the particulate matter, VOC, NO<sub>x</sub>, humidity, and temperature values from the SEN5X sensor and output them in the Serial Monitor.</p> <p>Follow the steps below to upload the example code:</p> <ul> <li>Open the Arduino IDE.</li> <li>Open the Library Manager tool, search for the <code>Sensirion I2C SEN5X</code> Arduino library and install the latest version.</li> <li>Open <code>exampleUsage</code> example sketch from the Sensirion I2C SEN5X Arduino library.</li> <li>Select your board and serial port; then, upload the sketch.</li> <li>Once the code compiles and uploads to the development board, open the serial monitor with the baud rate set to 115200 bps.</li> <li>The example sketch prints out the particulate matter, VOC, NO<sub>x</sub>, humidity, and temperature values from the SEN55 sensor.</li> </ul> Tip <p>If you're not familiar with using the Arduino IDE, refer to the Troubleshooting Tips section for related tutorials.</p>"},{"location":"quick_start/#source-files_1","title":"Source Files","text":"<ul> <li>Sensirion SEN5X Arduino library</li> <li> <p><code>exampleUsage.ino</code> example sketch</p> exampleUsage.ino <pre><code>/*\n * I2C-Generator: 0.3.0\n * Yaml Version: 2.1.3\n * Template Version: 0.7.0-112-g190ecaa\n */\n/*\n * Copyright (c) 2021, Sensirion AG\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * * Neither the name of Sensirion AG nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\n#include &lt;Arduino.h&gt;\n#include &lt;SensirionI2CSen5x.h&gt;\n#include &lt;Wire.h&gt;\n\n// The used commands use up to 48 bytes. On some Arduino's the default buffer\n// space is not large enough\n#define MAXBUF_REQUIREMENT 48\n\n#if (defined(I2C_BUFFER_LENGTH) &amp;&amp;                 \\\n     (I2C_BUFFER_LENGTH &gt;= MAXBUF_REQUIREMENT)) || \\\n    (defined(BUFFER_LENGTH) &amp;&amp; BUFFER_LENGTH &gt;= MAXBUF_REQUIREMENT)\n#define USE_PRODUCT_INFO\n#endif\n\nSensirionI2CSen5x sen5x;\n\nvoid printModuleVersions() {\n    uint16_t error;\n    char errorMessage[256];\n\n    unsigned char productName[32];\n    uint8_t productNameSize = 32;\n\n    error = sen5x.getProductName(productName, productNameSize);\n\n    if (error) {\n        Serial.print(\"Error trying to execute getProductName(): \");\n        errorToString(error, errorMessage, 256);\n        Serial.println(errorMessage);\n    } else {\n        Serial.print(\"ProductName:\");\n        Serial.println((char*)productName);\n    }\n\n    uint8_t firmwareMajor;\n    uint8_t firmwareMinor;\n    bool firmwareDebug;\n    uint8_t hardwareMajor;\n    uint8_t hardwareMinor;\n    uint8_t protocolMajor;\n    uint8_t protocolMinor;\n\n    error = sen5x.getVersion(firmwareMajor, firmwareMinor, firmwareDebug,\n                             hardwareMajor, hardwareMinor, protocolMajor,\n                             protocolMinor);\n    if (error) {\n        Serial.print(\"Error trying to execute getVersion(): \");\n        errorToString(error, errorMessage, 256);\n        Serial.println(errorMessage);\n    } else {\n        Serial.print(\"Firmware: \");\n        Serial.print(firmwareMajor);\n        Serial.print(\".\");\n        Serial.print(firmwareMinor);\n        Serial.print(\", \");\n\n        Serial.print(\"Hardware: \");\n        Serial.print(hardwareMajor);\n        Serial.print(\".\");\n        Serial.println(hardwareMinor);\n    }\n}\n\nvoid printSerialNumber() {\n    uint16_t error;\n    char errorMessage[256];\n    unsigned char serialNumber[32];\n    uint8_t serialNumberSize = 32;\n\n    error = sen5x.getSerialNumber(serialNumber, serialNumberSize);\n    if (error) {\n        Serial.print(\"Error trying to execute getSerialNumber(): \");\n        errorToString(error, errorMessage, 256);\n        Serial.println(errorMessage);\n    } else {\n        Serial.print(\"SerialNumber:\");\n        Serial.println((char*)serialNumber);\n    }\n}\n\nvoid setup() {\n\n    Serial.begin(115200);\n    while (!Serial) {\n        delay(100);\n    }\n\n    Wire.begin();\n\n    sen5x.begin(Wire);\n\n    uint16_t error;\n    char errorMessage[256];\n    error = sen5x.deviceReset();\n    if (error) {\n        Serial.print(\"Error trying to execute deviceReset(): \");\n        errorToString(error, errorMessage, 256);\n        Serial.println(errorMessage);\n    }\n\n// Print SEN55 module information if i2c buffers are large enough\n#ifdef USE_PRODUCT_INFO\n    printSerialNumber();\n    printModuleVersions();\n#endif\n\n    // set a temperature offset in degrees celsius\n    // Note: supported by SEN54 and SEN55 sensors\n    // By default, the temperature and humidity outputs from the sensor\n    // are compensated for the modules self-heating. If the module is\n    // designed into a device, the temperature compensation might need\n    // to be adapted to incorporate the change in thermal coupling and\n    // self-heating of other device components.\n    //\n    // A guide to achieve optimal performance, including references\n    // to mechanical design-in examples can be found in the app note\n    // \u201cSEN5x \u2013 Temperature Compensation Instruction\u201d at www.sensirion.com.\n    // Please refer to those application notes for further information\n    // on the advanced compensation settings used\n    // in `setTemperatureOffsetParameters`, `setWarmStartParameter` and\n    // `setRhtAccelerationMode`.\n    //\n    // Adjust tempOffset to account for additional temperature offsets\n    // exceeding the SEN module's self heating.\n    float tempOffset = 0.0;\n    error = sen5x.setTemperatureOffsetSimple(tempOffset);\n    if (error) {\n        Serial.print(\"Error trying to execute setTemperatureOffsetSimple(): \");\n        errorToString(error, errorMessage, 256);\n        Serial.println(errorMessage);\n    } else {\n        Serial.print(\"Temperature Offset set to \");\n        Serial.print(tempOffset);\n        Serial.println(\" deg. Celsius (SEN54/SEN55 only\");\n    }\n\n    // Start Measurement\n    error = sen5x.startMeasurement();\n    if (error) {\n        Serial.print(\"Error trying to execute startMeasurement(): \");\n        errorToString(error, errorMessage, 256);\n        Serial.println(errorMessage);\n    }\n}\n\nvoid loop() {\n    uint16_t error;\n    char errorMessage[256];\n\n    delay(1000);\n\n    // Read Measurement\n    float massConcentrationPm1p0;\n    float massConcentrationPm2p5;\n    float massConcentrationPm4p0;\n    float massConcentrationPm10p0;\n    float ambientHumidity;\n    float ambientTemperature;\n    float vocIndex;\n    float noxIndex;\n\n    error = sen5x.readMeasuredValues(\n        massConcentrationPm1p0, massConcentrationPm2p5, massConcentrationPm4p0,\n        massConcentrationPm10p0, ambientHumidity, ambientTemperature, vocIndex,\n        noxIndex);\n\n    if (error) {\n        Serial.print(\"Error trying to execute readMeasuredValues(): \");\n        errorToString(error, errorMessage, 256);\n        Serial.println(errorMessage);\n    } else {\n        Serial.print(\"MassConcentrationPm1p0:\");\n        Serial.print(massConcentrationPm1p0);\n        Serial.print(\"\\t\");\n        Serial.print(\"MassConcentrationPm2p5:\");\n        Serial.print(massConcentrationPm2p5);\n        Serial.print(\"\\t\");\n        Serial.print(\"MassConcentrationPm4p0:\");\n        Serial.print(massConcentrationPm4p0);\n        Serial.print(\"\\t\");\n        Serial.print(\"MassConcentrationPm10p0:\");\n        Serial.print(massConcentrationPm10p0);\n        Serial.print(\"\\t\");\n        Serial.print(\"AmbientHumidity:\");\n        if (isnan(ambientHumidity)) {\n            Serial.print(\"n/a\");\n        } else {\n            Serial.print(ambientHumidity);\n        }\n        Serial.print(\"\\t\");\n        Serial.print(\"AmbientTemperature:\");\n        if (isnan(ambientTemperature)) {\n            Serial.print(\"n/a\");\n        } else {\n            Serial.print(ambientTemperature);\n        }\n        Serial.print(\"\\t\");\n        Serial.print(\"VocIndex:\");\n        if (isnan(vocIndex)) {\n            Serial.print(\"n/a\");\n        } else {\n            Serial.print(vocIndex);\n        }\n        Serial.print(\"\\t\");\n        Serial.print(\"NoxIndex:\");\n        if (isnan(noxIndex)) {\n            Serial.println(\"n/a\");\n        } else {\n            Serial.println(noxIndex);\n        }\n    }\n}\n</code></pre> </li> </ul>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#product-resources","title":"Product Resources","text":"<ul> <li>SparkFun logo Product Page</li> <li> Design Files:<ul> <li> Schematic</li> <li> Board Dimensions</li> <li> KiCad Files</li> <li> STEP File</li> </ul> </li> <li>Component Documentation:<ul> <li> AP3012 Datasheet</li> <li> AP3012K EVB User Guide</li> </ul> </li> <li> SFE Product Showcase Video</li> <li> Hardware Repo</li> </ul>"},{"location":"resources/#sparkfun-logo-additional-resources","title":"SparkFun logo Additional Resources","text":"<ul> <li>SparkFun logo Qwiic Connect System</li> <li> SparkFun Technical Assistance</li> </ul>"},{"location":"resources/#manufacturers-resources","title":"\ud83c\udfed Manufacturer's Resources","text":"<p>Diodes Incorporated also provides great resources for the AP3012 Buck Regulator:</p> <ul> <li>Product Page<ul> <li> Technical Documentation</li> </ul> </li> <li> Technical Support Page</li> </ul> <p> </p>"},{"location":"troubleshooting_tips/","title":"Troubleshooting Tips","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"troubleshooting_tips/#getting-started-with-the-arduino-ide","title":"Getting Started with the Arduino IDE","text":"<p>This guide assumes users are utilizing the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE, library, or board add-on, please review the following tutorials:</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> <li>Installing Board Definitions in the Arduino IDE</li> </ul>"},{"location":"troubleshooting_tips/#5v-power-limitation","title":"5V Power Limitation","text":"<p>We recommend users limit the load current on the <code>5V</code> output supply voltage to a maximum of ~100mA.</p> <p>This should not be considered as a limitation dictated by the junction temperature of the AP3012. The limitation is driven by the power supply for the Qwiic connect system and the load being placed on the boost circuit. In order to compensate for the increased current, the supply voltage from the AP3012 boost converter will begin to drop as the current draw increases.</p>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun RFID USB Reader repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun RFID USB Reader repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun RFID USB Reader repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun RFID USB Reader repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"}]}